name: Build ActivityWatch macOS Installer

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean
      sign_and_notarize:
        description: 'Sign and notarize the app'
        required: false
        default: false
        type: boolean

env:
  APP_NAME: "ActivityWatch Team Installer"
  BUNDLE_ID: "watch.activity.team.installer"
  VERSION: "1.0.0"

jobs:
  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests certifi PyInstaller
        
    - name: Set executable permissions
      run: chmod +x build_macos.sh
      
    - name: Cache build dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Build unsigned app (for testing)
      run: ./build_macos.sh
      
    - name: Test app bundle
      run: |
        echo "Testing app bundle structure..."
        ls -la "dist/ActivityWatch Team Installer.app/Contents/"
        ls -la "dist/ActivityWatch Team Installer.app/Contents/MacOS/"
        
        echo "Testing if executable exists and has proper permissions..."
        test -x "dist/ActivityWatch Team Installer.app/Contents/MacOS/ActivityWatch Team Installer"
        echo "‚úÖ App bundle structure is valid"
        
    - name: Import certificates (if signing)
      if: ${{ github.event.inputs.sign_and_notarize == 'true' }}
      run: |
        # Create temporary keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate
        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.P12_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        
        rm certificate.p12
      env:
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    
    - name: Sign and notarize (if enabled)
      if: ${{ github.event.inputs.sign_and_notarize == 'true' }}
      run: |
        echo "üîê Code signing and notarizing..."
        
        # Get Developer ID
        DEVELOPER_ID=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
        echo "Using Developer ID: $DEVELOPER_ID"
        
        # Sign the app bundle
        codesign --deep --force --verify --verbose --sign "$DEVELOPER_ID" \
                 --options runtime \
                 --entitlements "dist/entitlements.plist" \
                 "dist/ActivityWatch Team Installer.app"
        
        # Verify signing
        codesign --verify --deep --strict --verbose=2 "dist/ActivityWatch Team Installer.app"
        spctl --assess -vvv --type execute "dist/ActivityWatch Team Installer.app"
        
        # Create signed DMG
        rm -f "dist/ActivityWatch-Team-Installer-macOS-"*.dmg
        ./build_macos.sh
        
        # Sign the DMG
        DMG_FILE=$(find dist -name "ActivityWatch-Team-Installer-macOS-*.dmg" | head -1)
        codesign --sign "$DEVELOPER_ID" "$DMG_FILE"
        
        # Notarize
        echo "üì§ Submitting for notarization..."
        xcrun notarytool submit "$DMG_FILE" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APP_PASSWORD }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --wait
        
        # Staple notarization
        xcrun stapler staple "$DMG_FILE"
        
        # Verify notarization
        xcrun stapler validate "$DMG_FILE"
        spctl --assess -vvv --type open --context context:primary-signature "$DMG_FILE"
        
        echo "‚úÖ Successfully signed and notarized"
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_PASSWORD: ${{ secrets.APP_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
    
    - name: Test installer functionality
      run: |
        echo "üß™ Testing installer functionality..."
        
        # Test terminal mode (dry run)
        python3 activitywatch_installer_macos_enhanced.py --terminal &
        INSTALLER_PID=$!
        
        # Send test email and quit after 3 seconds
        sleep 1
        echo -e "test@bali.love\nn" | timeout 3 python3 activitywatch_installer_macos_enhanced.py --terminal || true
        
        echo "‚úÖ Terminal mode test completed"
        
        # Test GUI mode initialization (without actually running)
        python3 -c "
        from activitywatch_installer_macos_enhanced import ActivityWatchMacOSInstaller
        import sys
        
        # Test installer initialization
        installer = ActivityWatchMacOSInstaller(gui_mode=False)
        print('‚úÖ Installer initializes correctly')
        
        # Test email validation
        assert installer.validate_email('test@bali.love') == True
        assert installer.validate_email('invalid-email') == False
        print('‚úÖ Email validation works')
        
        # Test system verification
        try:
            installer.verify_system()
            print('‚úÖ System verification passed')
        except Exception as e:
            print(f'‚ÑπÔ∏è System verification: {e}')
        "
        
        echo "‚úÖ All functionality tests passed"
    
    - name: Generate build artifacts info
      run: |
        echo "üìä Build Information" > dist/BUILD_INFO.txt
        echo "===================" >> dist/BUILD_INFO.txt
        echo "Build Date: $(date)" >> dist/BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> dist/BUILD_INFO.txt
        echo "Branch: ${{ github.ref_name }}" >> dist/BUILD_INFO.txt
        echo "Architecture: $(uname -m)" >> dist/BUILD_INFO.txt
        echo "macOS Version: $(sw_vers -productVersion)" >> dist/BUILD_INFO.txt
        echo "Python Version: $(python3 --version)" >> dist/BUILD_INFO.txt
        echo "PyInstaller Version: $(pip show PyInstaller | grep Version)" >> dist/BUILD_INFO.txt
        echo "" >> dist/BUILD_INFO.txt
        echo "App Bundle Size: $(du -h 'dist/ActivityWatch Team Installer.app' | cut -f1)" >> dist/BUILD_INFO.txt
        
        if ls dist/ActivityWatch-Team-Installer-macOS-*.dmg >/dev/null 2>&1; then
          DMG_FILE=$(ls dist/ActivityWatch-Team-Installer-macOS-*.dmg | head -1)
          echo "DMG Size: $(du -h "$DMG_FILE" | cut -f1)" >> dist/BUILD_INFO.txt
          echo "DMG Filename: $(basename "$DMG_FILE")" >> dist/BUILD_INFO.txt
        fi
        
        echo "" >> dist/BUILD_INFO.txt
        echo "File Checksums:" >> dist/BUILD_INFO.txt
        echo "===============" >> dist/BUILD_INFO.txt
        (cd dist && find . -name "*.app" -o -name "*.dmg" | xargs shasum -a 256) >> dist/BUILD_INFO.txt
        
        cat dist/BUILD_INFO.txt
    
    - name: Upload app bundle artifact
      uses: actions/upload-artifact@v4
      with:
        name: activitywatch-macos-app-${{ github.sha }}
        path: |
          dist/ActivityWatch Team Installer.app/
          dist/entitlements.plist
          dist/BUILD_INFO.txt
        retention-days: 30
    
    - name: Upload DMG artifact
      uses: actions/upload-artifact@v4
      with:
        name: activitywatch-macos-dmg-${{ github.sha }}
        path: |
          dist/*.dmg
          dist/BUILD_INFO.txt
        retention-days: 30
    
    - name: Create Release (if requested)
      if: ${{ github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: ActivityWatch Team Installer ${{ github.ref_name }}
        body: |
          ## ActivityWatch Team Edition - macOS Installer
          
          **Built from commit:** ${{ github.sha }}
          **Build date:** ${{ env.BUILD_DATE }}
          **Architecture:** Universal (arm64 + x86_64)
          
          ### Installation
          1. Download the DMG file below
          2. Double-click to mount the disk image
          3. Drag "ActivityWatch Team Installer" to Applications (or double-click to run directly)
          4. Enter your work email when prompted
          5. Wait for installation to complete
          
          ### Features
          - ‚úÖ Full ActivityWatch installation with team sync
          - ‚úÖ Automatic sync every 10 minutes
          - ‚úÖ Privacy controls and data filtering
          - ‚úÖ Launch Agent for auto-start on login
          - ‚úÖ Native macOS integration
          
          ### System Requirements
          - macOS 12.0+ (Monterey, Ventura, Sonoma)
          - Internet connection for sync
          - ~100MB disk space
          
          ### Security Notes
          ${{ github.event.inputs.sign_and_notarize == 'true' && '- ‚úÖ Signed and notarized by Apple' || '- ‚ö†Ô∏è  Unsigned build - you may see security warnings' }}
          
          ### Troubleshooting
          If you see "App can't be opened" warnings:
          1. Right-click the app ‚Üí "Open" ‚Üí "Open anyway"
          2. Or temporarily allow in System Preferences ‚Üí Security & Privacy
          
          For support, create an issue in this repository.
        files: |
          dist/ActivityWatch-Team-Installer-macOS-*.dmg
          dist/BUILD_INFO.txt
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BUILD_DATE: ${{ env.BUILD_DATE }}
    
    - name: Cleanup keychain
      if: always()
      run: |
        if security list-keychains | grep -q build.keychain; then
          security delete-keychain build.keychain || true
        fi
    
    - name: Build Summary
      if: always()
      run: |
        echo "üéâ Build Summary"
        echo "==============="
        echo "Status: ${{ job.status }}"
        echo "Architecture: $(uname -m)"
        
        if [[ -d "dist/ActivityWatch Team Installer.app" ]]; then
          echo "‚úÖ App bundle created successfully"
          APP_SIZE=$(du -h "dist/ActivityWatch Team Installer.app" | cut -f1)
          echo "   Size: $APP_SIZE"
        else
          echo "‚ùå App bundle creation failed"
        fi
        
        if ls dist/ActivityWatch-Team-Installer-macOS-*.dmg >/dev/null 2>&1; then
          DMG_FILE=$(ls dist/ActivityWatch-Team-Installer-macOS-*.dmg | head -1)
          DMG_SIZE=$(du -h "$DMG_FILE" | cut -f1)
          echo "‚úÖ DMG installer created successfully"
          echo "   File: $(basename "$DMG_FILE")"
          echo "   Size: $DMG_SIZE"
        else
          echo "‚ùå DMG creation failed"
        fi
        
        echo ""
        echo "Next steps:"
        echo "1. Download artifacts from the Actions tab"
        echo "2. Test installation on a clean macOS system"
        echo "3. For production release, enable signing and notarization"